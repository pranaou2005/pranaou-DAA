#include <stdio.h>
#include <limits.h>

#define V 4

int tsp(int graph[][V], int pos, int visited, int dp[][1<<V]) {
    if (visited == ((1<<V)-1))
        return graph[pos][0];
    
    if (dp[pos][visited] != -1)
        return dp[pos][visited];
    
    int ans = INT_MAX;
    for (int city = 0; city < V; city++) {
        if ((visited&(1<<city)) == 0) {
            int newAns = graph[pos][city] + tsp(graph, city, visited|(1<<city), dp);
            ans = (ans < newAns) ? ans : newAns;
        }
    }
    
    return dp[pos][visited] = ans;
}

int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    
    int dp[V][1<<V];
    for (int i = 0; i < V; i++)
        for (int j = 0; j < (1<<V); j++)
            dp[i][j] = -1;
    
    printf("The minimum cost is %d\n", tsp(graph, 0, 1, dp));
    return 0;
}
